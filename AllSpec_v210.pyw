# -*- coding: utf-8 -*-
"""AllSpec_210

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16AAP6fsNc5k_X2BqpJucBpt2CftrQVJ_
"""

import tkinter as tk
from tkinter import messagebox, filedialog, simpledialog, ttk, colorchooser
import os
import numpy as np
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure
from scipy.signal import savgol_filter, find_peaks
from PIL import Image, ImageTk
from tkinter import PhotoImage
import base64
import io
import webbrowser
import datetime

logo_base64 = """

"""

logo_depto_base64 = """

"""

plt.rcParams['font.family'] = 'Times New Roman'
plt.rcParams['axes.linewidth'] = 1.5
plt.rcParams['axes.edgecolor'] = 'black'
plt.rcParams['axes.labelcolor'] = 'black'
plt.rcParams['xtick.color'] = 'black'
plt.rcParams['ytick.color'] = 'black'

# --- UV-Vis ---
class ProcesadorEspectros:
    def __init__(self, master):
        self.master = master
        self.master.title("🧪 UVVis")
        self.master.geometry("900x780")
        self.master.configure(bg="#e6f0fa")
        self.master.state('zoomed')

        self.etiqueta_x = tk.StringVar(value="Longitud de onda (nm)")
        self.etiqueta_y = tk.StringVar(value="Absorbancia")
        self.xmin = tk.StringVar()
        self.xmax = tk.StringVar()
        self.ymin = tk.StringVar()
        self.ymax = tk.StringVar()

        # Diccionarios para datos y estado de visibilidad
        self.datos_originales = {}
        self.datos_suavizados = {}
        self.mostrar = {}
        self.linea_base = None
        self.limites_originales = None

        self.setup_ui()

    def setup_ui(self):
        estilo_boton1 = {
            "bg": "#398ad7",
            "fg": "white",
            "font": ("Verdana", 10, "bold"),
            "bd": 0,
            "activebackground": "#1f5aa8",
            "activeforeground": "white"
        }

        fuente_label = ("Segoe UI", 9, "bold")
        color_fondo = "#d0e7ff"

        # Variable para ocultar leyenda
        self.var_ocultar_leyenda = tk.BooleanVar(value=False)

        # Frame principal de controles (primera fila de botones)
        frame_controles = tk.Frame(self.master, bg=color_fondo)
        frame_controles.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

# Frame para botones principales (fila 0)
        frame_botones_principales = tk.Frame(frame_controles, bg=color_fondo)
        frame_botones_principales.grid(row=0, column=0, columnspan=10, sticky="w")

        frame_grafica = tk.Frame(self.master, bg="#b0d4fa")
        frame_grafica.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True , padx=10, pady=5)

# Botones fila 0
        tk.Button(frame_botones_principales, text="📂 Cargar archivos", command=self.cargar_archivos, **estilo_boton1).grid(row=0, column=0, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="👁️ Mostrar/Ocultar selección", command=self.toggle_mostrar_seleccion, **estilo_boton1).grid(row=0, column=1, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="🗑️ Eliminar archivo(s)", command=self.eliminar_archivos, **estilo_boton1).grid(row=0, column=2, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="📊 Actualizar gráfica", command=self.actualizar_grafica, **estilo_boton1).grid(row=0, column=3, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="💾 Exportar CSV", command=self.procesar_exportar, **estilo_boton1).grid(row=0, column=4, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="🖼️ Exportar JPG", command=self.exportar_jpg, **estilo_boton1).grid(row=0, column=5, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="🔄 Restablecer zoom", command=self.restablecer_zoom, **estilo_boton1).grid(row=0, column=6, padx=5, pady=2)

# Frame para botones secundarios (línea base, regresar, etc)
        frame_botones_secundarios = tk.Frame(frame_controles, bg=color_fondo)
        frame_botones_secundarios.grid(row=1, column=0, columnspan=10, sticky="w")

        tk.Button(frame_botones_secundarios, text="📈 Cargar línea base", command=self.cargar_linea_base, **estilo_boton1).grid(row=0, column=0, padx=5, pady=2)
        tk.Button(frame_botones_secundarios, text="↩️ Regresar al menú", command=self.regresar_al_menu, bg="#b21e5a", fg="white", font=fuente_label).grid(row=0, column=6, padx=5, pady=2)

# Ahora etiquetas y entradas debajo en filas siguientes
        tk.Label(frame_controles, text="Etiqueta eje X:", bg=color_fondo, font=fuente_label).grid(row=2, column=0, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.etiqueta_x, width=20).grid(row=2, column=1, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="Etiqueta eje Y:", bg=color_fondo, font=fuente_label).grid(row=2, column=2, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.etiqueta_y, width=20).grid(row=2, column=3, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="X min:", bg=color_fondo, font=fuente_label).grid(row=3, column=0, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.xmin, width=10).grid(row=3, column=1, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="X max:", bg=color_fondo, font=fuente_label).grid(row=3, column=2, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.xmax, width=10).grid(row=3, column=3, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="Y min:", bg=color_fondo, font=fuente_label).grid(row=4, column=0, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.ymin, width=10).grid(row=4, column=1, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="Y max:", bg=color_fondo, font=fuente_label).grid(row=4, column=2, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.ymax, width=10).grid(row=4, column=3, sticky='w', padx=5, pady=2)


        tk.Checkbutton(frame_controles, text="Ocultar leyenda", variable=self.var_ocultar_leyenda, bg=color_fondo,command=self.actualizar_grafica).grid(row=4, column=0, columnspan=2, sticky='w')

        # Frame lista de archivos (lado izquierdo)
        frame_lista = tk.Frame(self.master, bg="#fff0e1")
        frame_lista.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=5)

        tk.Label(frame_lista, text="Archivos cargados:", bg="#fff0e1", font=("Segoe UI", 10, "bold")).pack(anchor='w')
        self.listbox = tk.Listbox(frame_lista, selectmode=tk.EXTENDED, width=35, height=32)
        self.listbox.pack(fill=tk.BOTH, expand=True, pady=5)

    # Frame gráfico (lado derecho)
        frame_grafica = tk.Frame(self.master, bg="#b0d4fa")
        frame_grafica.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True , padx=10, pady=5)

    # Figura y canvas matplotlib (solo una vez)
        self.fig = Figure(figsize=(7.5, 5))  # Ajusta tamaño si quieres
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=frame_grafica)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        self.toolbar = NavigationToolbar2Tk(self.canvas, frame_grafica)
        self.toolbar.update()
        self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)

    def leer_datos(self, archivo):
        longitudes = []
        absorbancias = []
        with open(archivo, 'r', encoding='utf-8', errors='ignore') as f:
            for linea in f:
                linea = linea.strip()
                if not linea or not any(c.isdigit() for c in linea):
                    continue
                partes = linea.replace(',', ' ').split()
                if len(partes) >= 2:
                    try:
                        x = float(partes[0])
                        y = float(partes[1])
                        longitudes.append(x)
                        absorbancias.append(y)
                    except ValueError:
                        continue
        if len(longitudes) < 5:
            raise ValueError("Datos insuficientes")
        return np.array(longitudes), np.array(absorbancias)

    def cargar_archivos(self):
        rutas = filedialog.askopenfilenames(title="Selecciona archivos UV-Vis",
                                            filetypes=[("Archivos UV-Vis", "*.csv *.ascii *.dat *.sp *.rls")])
        if not rutas:
            return

        nuevos_cargados = 0
        for ruta in rutas:
            nombre = os.path.splitext(os.path.basename(ruta))[0]
            if nombre in self.datos_originales:
                messagebox.showwarning("Archivo duplicado", f"El archivo '{nombre}' ya fue cargado.")
                continue
            try:
                x, y = self.leer_datos(ruta)
                if len(y) >= 11:
                    y_suave = savgol_filter(y, 11, 3)
                else:
                    y_suave = y
                self.datos_originales[nombre] = (x, y)
                self.datos_suavizados[nombre] = (x, y_suave)
                self.mostrar[nombre] = True
                self.listbox.insert(tk.END, nombre)
                nuevos_cargados += 1
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo cargar '{nombre}': {e}")

        if nuevos_cargados > 0:
            self.actualizar_grafica()

    def toggle_mostrar_seleccion(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona uno o más archivos en la lista para mostrar u ocultar.")
            return
        for idx in seleccion:
            nombre = self.listbox.get(idx)
            self.mostrar[nombre] = not self.mostrar.get(nombre, True)
        self.actualizar_grafica()

    def eliminar_archivos(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona uno o más archivos para eliminar.")
            return
        archivos_eliminar = [self.listbox.get(i) for i in seleccion]
        if not messagebox.askyesno("Confirmar eliminación", f"¿Eliminar {len(archivos_eliminar)} archivo(s) seleccionado(s)?"):
            return
        for nombre in archivos_eliminar:
            self.datos_originales.pop(nombre, None)
            self.datos_suavizados.pop(nombre, None)
            self.mostrar.pop(nombre, None)
        for i in reversed(seleccion):
            self.listbox.delete(i)
        self.actualizar_grafica()

    def actualizar_grafica(self):
    # Guardar límites actuales antes de limpiar
        if self.ax.has_data():
            current_xlim = self.ax.get_xlim()
            current_ylim = self.ax.get_ylim()
        else:
            current_xlim, current_ylim = None, None

        self.ax.clear()
        any_data = False
        for nombre in self.datos_originales:
            if self.mostrar.get(nombre, True):
                x, y = self.datos_suavizados[nombre]
                if self.linea_base is not None:
                    y_corr = np.array([yi - self.linea_base.get(xi, 0) for xi, yi in zip(x, y)])
                else:
                    y_corr = y
                self.ax.plot(x, y_corr, label=nombre)
                any_data = True

    # Configuraciones estéticas
        self.ax.set_xlabel(self.etiqueta_x.get(), fontsize=14)
        self.ax.set_ylabel(self.etiqueta_y.get(), fontsize=14)
        self.ax.grid(False)
        self.ax.spines['top'].set_visible(False)
        self.ax.spines['right'].set_visible(False)
        self.ax.spines['left'].set_position(('outward', 0))
        self.ax.spines['bottom'].set_position(('outward', 0))
        self.ax.tick_params(direction='in', length=6, width=1, which='major', top=False, right=False)
        self.ax.tick_params(direction='in', length=3, width=1, which='minor', top=False, right=False)
        self.ax.minorticks_on()
        self.ax.tick_params(axis='both', which='minor', length=3)

        if any_data and not self.var_ocultar_leyenda.get():
            self.ax.legend()

    # Aplicar límites sólo si el usuario los definió
        try:
            xmin = float(self.xmin.get()) if self.xmin.get() else None
            xmax = float(self.xmax.get()) if self.xmax.get() else None
            ymin = float(self.ymin.get()) if self.ymin.get() else None
            ymax = float(self.ymax.get()) if self.ymax.get() else None

            if xmin is not None and xmax is not None:
                self.ax.set_xlim(xmin, xmax)
            elif current_xlim is not None:
                self.ax.set_xlim(current_xlim)  # preserva zoom actual

            if ymin is not None and ymax is not None:
                self.ax.set_ylim(ymin, ymax)
            elif current_ylim is not None:
                self.ax.set_ylim(current_ylim)  # preserva zoom actual
        except ValueError:
            messagebox.showwarning("Límites inválidos", "Los valores de límites deben ser numéricos.")

    # Actualiza límites originales sólo si no hay zoom activo o usuario no ha cambiado los límites
        if not any([self.xmin.get(), self.xmax.get(), self.ymin.get(), self.ymax.get()]):
            if any_data:
                self.limites_originales = (self.ax.get_xlim(), self.ax.get_ylim())

        self.canvas.draw_idle()

    def procesar_exportar(self):
        if not self.datos_originales:
            messagebox.showwarning("Advertencia", "No hay datos para exportar.")
            return

        nombre_base = simpledialog.askstring("Nombre base", "Ingrese nombre base para exportar:")
        if not nombre_base:
            return

        archivo = filedialog.asksaveasfilename(defaultextension=".csv",
                                           filetypes=[("CSV files", "*.csv")])
        if not archivo:
            return

        # Obtener longitudes desde datos originales y ordenar de mayor a menor
        longitudes = self.datos_originales[list(self.datos_originales.keys())[0]][0]
        indices_ordenados = sorted(range(len(longitudes)), key=lambda i: longitudes[i])

        with open(archivo, 'w', encoding='utf-8') as f:
            encabezado = ["Longitud_de_onda"] + [n for n in self.datos_originales if self.mostrar.get(n, True)]
            f.write(",".join(encabezado) + "\n")

            for i in indices_ordenados:
                fila = [f"{longitudes[i]:.3f}"]
                for nombre in self.datos_originales:
                    if self.mostrar.get(nombre, True):
                        y = self.datos_originales[nombre][1][i]
                        if self.linea_base is not None:
                            y -= self.linea_base.get(longitudes[i], 0)
                        fila.append(f"{y:.6f}")
                f.write(",".join(fila) + "\n")

        messagebox.showinfo("Exportación", f"Archivo exportado como: {archivo}")

    def exportar_jpg(self):
        archivo = filedialog.asksaveasfilename(defaultextension=".jpg",
                                               filetypes=[("JPG files", "*.jpg"), ("PNG files", "*.png")])
        if not archivo:
            return
        self.fig.savefig(archivo, dpi=300)
        messagebox.showinfo("Exportación", f"Gráfica guardada como {archivo}")

    def restablecer_zoom(self):
        if self.limites_originales:
            self.ax.set_xlim(self.limites_originales[0])
            self.ax.set_ylim(self.limites_originales[1])
            self.canvas.draw()

    def regresar_al_menu(self):
        self.master.destroy()
        root_menu = tk.Tk()
        app = AppPrincipal(root_menu)
        root_menu.mainloop()


    def cargar_linea_base(self):
        ruta = filedialog.askopenfilename(title="Seleccione línea base",
                                          filetypes=[("Archivos UV-Vis", "*.csv *.ascii *.dat *.sp *.rls")])
        if not ruta:
            return
        try:
            x, y = self.leer_datos(ruta)
            self.linea_base = dict(zip(x, y))
            messagebox.showinfo("Línea base", "Línea base cargada correctamente")
            self.actualizar_grafica()
        except Exception as e:
            messagebox.showerror("Error", f"No se pudo cargar la línea base: {e}")

# --- IR ---

class ProcesadorIR:
    def __init__(self, master):
        self.master = master
        self.master.title("Infrarojo")
        self.master.geometry("1000x800")
        self.master.configure(bg="#e8f5e9")
        self.master.state('zoomed')

        self.datos_originales = {}
        self.datos_suavizados = {}
        self.mostrar = {}
        self.limites_originales = None
        self.colores = {}
        self.var_ocultar_leyenda = tk.BooleanVar(value=False)

        self.etiqueta_x = tk.StringVar(value="Número de onda (cm⁻¹)")
        self.etiqueta_y = tk.StringVar(value="% Transmitancia")
        self.xmin = tk.StringVar()
        self.xmax = tk.StringVar()
        self.ymin = tk.StringVar()
        self.ymax = tk.StringVar()

        color_fondo = "#ffe6f0"
        fuente_label = ("Segoe UI", 9, "bold")

        frame_controles = tk.Frame(master, bg=color_fondo)
        frame_controles.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        frame_lista = tk.Frame(master, bg="#ffe6f0")
        frame_lista.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=5)

        frame_grafica = tk.Frame(master, bg="#800040")
        frame_grafica.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=5)

        estilo_boton = {
            "bg": "#cc6699",
            "fg": "white",
            "font": ("Verdana", 10, "bold"),
            "bd": 0,
            "activebackground": "#388e3c",
            "activeforeground": "white"
        }

        botones = [
            ("📂 Cargar archivos IR", self.cargar_archivos),
            ("👁️ Mostrar/Ocultar", self.toggle_mostrar_seleccion),
            ("🗑️ Eliminar", self.eliminar_archivos),
            ("📊 Actualizar gráfica", self.actualizar_grafica),
            ("💾 Exportar CSV", self.exportar_csv),
            ("🖼️ Exportar JPG", self.exportar_jpg),
            ("🔄 Restablecer zoom", self.restablecer_zoom),
            ("📈 Detectar picos", self.detectar_picos)
        ]
        for idx, (txt, cmd) in enumerate(botones):
            tk.Button(frame_controles, text=txt, command=cmd, **estilo_boton).grid(row=0, column=idx, padx=5)

        tk.Checkbutton(frame_controles, text="Ocultar leyenda", variable=self.var_ocultar_leyenda,
                       bg=color_fondo, font=fuente_label, command=self.actualizar_grafica).grid(row=4, column=0, sticky='w', padx=5)

        tk.Button(frame_controles, text="🎨 Cambiar color", command=self.cambiar_color, **estilo_boton).grid(row=1, column=1, padx=5, pady=5)

        tk.Button(frame_controles, text="🔙 Regresar al menú", command=self.regresar_al_menu,
                  bg="#b21e5a", fg="white", font=fuente_label, bd=0).grid(row=1, column=6, padx=5, pady=5)

        labels = [
            ("Etiqueta eje X:", self.etiqueta_x),
            ("Etiqueta eje Y:", self.etiqueta_y),
            ("X min:", self.xmin),
            ("X max:", self.xmax),
            ("Y min:", self.ymin),
            ("Y max:", self.ymax)
        ]
        for i, (texto, var) in enumerate(labels):
            row, col = 2 + i // 2, (i % 2) * 2
            tk.Label(frame_controles, text=texto, bg=color_fondo, font=fuente_label).grid(row=row, column=col, sticky='e', padx=5, pady=2)
            tk.Entry(frame_controles, textvariable=var, width=20).grid(row=row, column=col+1, sticky='w', padx=5, pady=2)

        tk.Label(frame_lista, text="Archivos cargados:", bg="#fff0e1", font=("Segoe UI", 10, "bold")).pack(anchor='w')
        self.listbox = tk.Listbox(frame_lista, selectmode=tk.EXTENDED, width=35, height=32)
        self.listbox.pack(fill=tk.BOTH, expand=True, pady=5)

        self.fig = Figure(figsize=(7, 5))
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=frame_grafica)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        self.toolbar = NavigationToolbar2Tk(self.canvas, frame_grafica)
        self.toolbar.update()
        self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)

    def cambiar_color(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona un espectro para cambiar su color.")
            return
        nombre = self.listbox.get(seleccion[0])
        color = colorchooser.askcolor(title="Selecciona un color")[1]
        if color:
            self.colores[nombre] = color
            self.actualizar_grafica()

    def leer_ir_datos(self, archivo):
        con_datos = False
        x, y = [], []
        with open(archivo, 'r', encoding='utf-8', errors='ignore') as f:
            for linea in f:
                linea = linea.strip()
                if "#DATA" in linea:
                    con_datos = True
                    continue
                if con_datos:
                    if not linea or not any(c.isdigit() for c in linea):
                        continue
                    partes = linea.replace(',', ' ').split()
                    if len(partes) >= 2:
                        try:
                            x.append(float(partes[0]))
                            y.append(float(partes[1]))
                        except ValueError:
                            continue
        if len(x) < 5:
            raise ValueError("Datos insuficientes o mal formateados.")
        return np.array(x), np.array(y)

    def cargar_archivos(self):
        rutas = filedialog.askopenfilenames(title="Selecciona archivos IR", filetypes=[("Archivos IR", "*.asc *.txt")])
        if not rutas:
            return

        for ruta in rutas:
            nombre = os.path.splitext(os.path.basename(ruta))[0]
            if nombre in self.datos_originales:
                messagebox.showwarning("Duplicado", f"El archivo '{nombre}' ya está cargado.")
                continue
            try:
                x, y = self.leer_ir_datos(ruta)
                y_suave = savgol_filter(y, 11, 3) if len(y) >= 11 else y
                self.datos_originales[nombre] = (x, y)
                self.datos_suavizados[nombre] = (x, y_suave)
                self.mostrar[nombre] = True
                self.listbox.insert(tk.END, nombre)
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo cargar '{nombre}': {e}")

        self.actualizar_grafica()

    def actualizar_grafica(self):
        self.ax.clear()
        any_data = False
        for nombre in self.datos_originales:
            if self.mostrar.get(nombre, True):
                x, y = self.datos_suavizados[nombre]
                color = self.colores.get(nombre, None)
                self.ax.plot(x, y, label=nombre, color=color)
                any_data = True
        self.ax.set_xlabel("Número de onda (cm⁻¹)", fontsize=14)
        self.ax.set_ylabel("% Transmitancia", fontsize=14)
        self.ax.invert_xaxis()
        self.ax.grid(False)
        self.ax.spines['top'].set_visible(False)
        self.ax.spines['right'].set_visible(False)
        self.ax.spines['left'].set_position(('outward', 0))
        self.ax.spines['bottom'].set_position(('outward', 0))

        self.ax.tick_params(direction='in', length=6, width=1, which='major', top=False, right=False)
        self.ax.tick_params(direction='in', length=3, width=1, which='minor', top=False, right=False)

        self.ax.minorticks_on()
        self.ax.tick_params(axis='both', which='minor', length=3)

        if any_data and not self.var_ocultar_leyenda.get():
            self.ax.legend()
        if any_data:
            self.limites_originales = (self.ax.get_xlim(), self.ax.get_ylim())
        self.canvas.draw()

    def actualizar_grafica(self):
        self.ax.clear()
        any_data = False
        for nombre in self.datos_originales:
            if self.mostrar.get(nombre, True):
                x, y = self.datos_suavizados[nombre]
                color = self.colores.get(nombre, None)
                self.ax.plot(x, y, label=nombre, color=color)
                any_data = True

        self.ax.set_xlabel(self.etiqueta_x.get(), fontsize=14)
        self.ax.set_ylabel(self.etiqueta_y.get(), fontsize=14)
        self.ax.invert_xaxis()
        self.ax.grid(False)
        self.ax.spines['top'].set_visible(False)
        self.ax.spines['right'].set_visible(False)
        self.ax.spines['left'].set_position(('outward', 0))
        self.ax.spines['bottom'].set_position(('outward', 0))
        self.ax.tick_params(direction='in', length=6, width=1, which='major', top=False, right=False)
        self.ax.tick_params(direction='in', length=3, width=1, which='minor', top=False, right=False)
        self.ax.minorticks_on()
        self.ax.tick_params(axis='both', which='minor', length=3)

        if any_data and not self.var_ocultar_leyenda.get():
            self.ax.legend()

    # Aplicar límites si se especifican
        try:
            xmin = float(self.xmin.get()) if self.xmin.get() else None
            xmax = float(self.xmax.get()) if self.xmax.get() else None
            ymin = float(self.ymin.get()) if self.ymin.get() else None
            ymax = float(self.ymax.get()) if self.ymax.get() else None

            if xmin is not None and xmax is not None:
                self.ax.set_xlim(xmin, xmax)
            if ymin is not None and ymax is not None:
                self.ax.set_ylim(ymin, ymax)
        except ValueError:
           messagebox.showwarning("Límites inválidos", "Los límites deben ser numéricos.")

    # Guardar límites originales
        if any_data and not any([self.xmin.get(), self.xmax.get(), self.ymin.get(), self.ymax.get()]):
            self.limites_originales = (self.ax.get_xlim(), self.ax.get_ylim())

        self.canvas.draw_idle()

    def detectar_picos(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona un archivo para detectar picos.")
            return

        nombre = self.listbox.get(seleccion[0])
        x, y = self.datos_suavizados[nombre]

        picos, props = find_peaks(-y, prominence=0.5)

        if len(picos) == 0:
            messagebox.showinfo("Resultado", "No se detectaron picos prominentes.")
            return

        self.actualizar_grafica()
        self.ax.plot(x[picos], y[picos], 'ro', label="Picos")
        self.ax.legend()
        self.canvas.draw()

        self.mostrar_tabla_picos(x[picos], y[picos])

    def mostrar_tabla_picos(self, x_picos, y_picos):
        top = tk.Toplevel(self.master)
        top.title("Picos detectados")
        tree = ttk.Treeview(top, columns=("cm⁻¹", "%T"), show="headings")
        tree.heading("cm⁻¹", text="Número de onda (cm⁻¹)")
        tree.heading("%T", text="% Transmitancia")

        for xi, yi in zip(x_picos, y_picos):
            tree.insert("", tk.END, values=(f"{xi:.2f}", f"{yi:.2f}"))

        tree.pack(fill=tk.BOTH, expand=True)
        btn_exportar = tk.Button(top, text="Exportar picos a CSV", command=lambda: self.exportar_picos_csv(x_picos, y_picos))
        btn_exportar.pack(pady=5)

    def exportar_picos_csv(self, x, y):
        archivo = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV", "*.csv")])
        if not archivo:
            return
        with open(archivo, 'w', encoding='utf-8') as f:
            f.write("Numero_de_onda,%T\n")
            for xi, yi in zip(x, y):
                f.write(f"{xi:.2f},{yi:.2f}\n")
        messagebox.showinfo("Exportación", f"Picos exportados a: {archivo}")

    def toggle_mostrar_seleccion(self):
        seleccion = self.listbox.curselection()
        for idx in seleccion:
            nombre = self.listbox.get(idx)
            self.mostrar[nombre] = not self.mostrar.get(nombre, True)
        self.actualizar_grafica()

    def eliminar_archivos(self):
        seleccion = self.listbox.curselection()
        for idx in reversed(seleccion):
            nombre = self.listbox.get(idx)
            del self.datos_originales[nombre]
            del self.datos_suavizados[nombre]
            del self.mostrar[nombre]
            self.listbox.delete(idx)
        self.actualizar_grafica()

    def exportar_csv(self):
        if not self.datos_suavizados:
            return
        archivo = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV", "*.csv")])
        if not archivo:
            return

        x_ref = list(self.datos_suavizados.values())[0][0]
        with open(archivo, 'w', encoding='utf-8') as f:
            encabezado = ["Numero_de_onda"] + [n for n in self.datos_suavizados if self.mostrar.get(n, True)]
            f.write(",".join(encabezado) + "\n")
            for i in range(len(x_ref)):
                fila = [f"{x_ref[i]:.2f}"]
                for nombre in self.datos_suavizados:
                    if self.mostrar.get(nombre, True):
                        y = self.datos_suavizados[nombre][1][i]
                        fila.append(f"{y:.6f}")
                f.write(",".join(fila) + "\n")
        messagebox.showinfo("Exportación", f"Archivo exportado como: {archivo}")

    def exportar_jpg(self):
        archivo = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPG", "*.jpg"), ("PNG", "*.png")])
        if archivo:
            self.fig.savefig(archivo, dpi=300)
            messagebox.showinfo("Exportación", f"Gráfica guardada como {archivo}")

    def restablecer_zoom(self):
        if self.limites_originales:
            self.ax.set_xlim(self.limites_originales[0])
            self.ax.set_ylim(self.limites_originales[1])
            self.canvas.draw()

    def regresar_al_menu(self):
        self.master.destroy()
        root_menu = tk.Tk()
        app = AppPrincipal(root_menu)
        root_menu.mainloop()


# --- VOLTAM ---
class CVApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Voltamperometría y cronamperometría")
        self.master.geometry("900x700")
        self.master.configure(bg="#fff4e6")
        self.master.state('zoomed')
        self.datos_corregidos = {}
        self.usando_correccion_blanco = False
        self.colores_archivo = {}
        self.colores = {}


        self.archivos = []
        self.datos_originales = {}
        self.datos_blanco = None
        self.etiqueta_x = tk.StringVar(value="Potencial (V)")
        self.etiqueta_y = tk.StringVar(value="Corriente (A)")
        self.xmin = tk.StringVar()
        self.xmax = tk.StringVar()
        self.ymin = tk.StringVar()
        self.ymax = tk.StringVar()
        self.ocultar_leyenda = tk.BooleanVar(value=False)

        self.setup_ui()

    def setup_ui(self):

        estilo_boton = {
            "bg": "#f97f51",
            "fg": "white",
            "font": ("Segoe UI", 10, "bold"),
            "bd": 0,
            "activebackground": "#cc9966",
            "activeforeground": "white"
        }

        frame_controles = tk.Frame(self.master, bg="#ffe6cc")
        frame_controles.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        frame_lista = tk.Frame(self.master, bg="#ffe6cc")
        frame_lista.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=5)

        frame_grafica = tk.Frame(self.master, bg="#ffe6cc")
        frame_grafica.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Etiquetas y entradas
        fuente_label = ("Segoe UI", 9, "bold")
        color_fondo = "#fff0e1"

            # Dividir controles en dos filas para botones principales y secundarios
        frame_botones_principales = tk.Frame(frame_controles, bg=color_fondo)
        frame_botones_principales.grid(row=0, column=0, columnspan=10, sticky="w")

        frame_botones_secundarios = tk.Frame(frame_controles, bg=color_fondo)
        frame_botones_secundarios.grid(row=1, column=0, columnspan=10, sticky="w")

    # Botones fila principal (fila 0)
        tk.Button(frame_botones_principales, text="📂 Cargar archivos", command=self.cargar_archivos, **estilo_boton).grid(row=0, column=0, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="🗑️ Eliminar archivo", command=self.eliminar_archivo, **estilo_boton).grid(row=0, column=1, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="⚪ Cargar blanco", command=self.cargar_blanco, **estilo_boton).grid(row=0, column=2, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="⚖️ Corregir con blanco", command=self.corregir_con_blanco, **estilo_boton).grid(row=0, column=3, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="📊 Graficar", command=self.graficar, **estilo_boton).grid(row=0, column=4, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="💾 Exportar CSV", command=self.exportar_csv, **estilo_boton).grid(row=0, column=5, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="🖼️ Exportar JPG", command=self.exportar_jpg, **estilo_boton).grid(row=0, column=6, padx=5, pady=2)
        tk.Button(frame_botones_principales, text="🔄 Restablecer zoom", command=self.restablecer_zoom, **estilo_boton).grid(row=0, column=7, padx=5, pady=2)

    # Botones fila secundaria (fila 1)
        tk.Button(frame_botones_secundarios, text="🔙 Regresar al menú", command=self.regresar_al_menu, bg="#b21e5a", fg="White", font=fuente_label).grid(row=0, column=2, padx=5, pady=2)
        tk.Button(frame_botones_secundarios, text="↔️ Alternar original/corregido", command=self.alternar_correccion_blanco, **estilo_boton).grid(row=0, column=1, padx=5, pady=2)
        tk.Button(frame_botones_secundarios, text="🎨 Cambiar color", command=self.cambiar_color, **estilo_boton).grid(row=0, column=0, padx=5, pady=2)

    # Etiquetas y entradas para ejes (debajo de botones)
        tk.Label(frame_controles, text="Etiqueta eje X:", bg=color_fondo, font=fuente_label).grid(row=2, column=0, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.etiqueta_x, width=15).grid(row=2, column=1, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="Etiqueta eje Y:", bg=color_fondo, font=fuente_label).grid(row=2, column=2, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.etiqueta_y, width=15).grid(row=2, column=3, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="X min:", bg=color_fondo, font=fuente_label).grid(row=3, column=0, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.xmin, width=10).grid(row=3, column=1, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="X max:", bg=color_fondo, font=fuente_label).grid(row=3, column=2, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.xmax, width=10).grid(row=3, column=3, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="Y min:", bg=color_fondo, font=fuente_label).grid(row=4, column=0, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.ymin, width=10).grid(row=4, column=1, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="Y max:", bg=color_fondo, font=fuente_label).grid(row=4, column=2, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.ymax, width=10).grid(row=4, column=3, sticky='w', padx=5, pady=2)

    # Checkbox ocultar leyenda (fila 5)
        tk.Checkbutton(frame_controles, text="Ocultar leyenda", variable=self.ocultar_leyenda, bg=color_fondo, font=fuente_label, command=self.graficar).grid(row=5, column=0, columnspan=2, sticky='w', padx=5, pady=2)

    # Listbox para archivos (lado izquierdo)
        tk.Label(frame_lista, text="Archivos cargados:", bg="#fff0e1", font=("Segoe UI", 10, "bold")).pack(anchor='w')
        self.listbox = tk.Listbox(frame_lista, selectmode=tk.EXTENDED, width=40, height=32)
        self.listbox.pack(fill=tk.BOTH, expand=True, pady=5)

    # Área gráfica (lado derecho)
        self.fig = Figure(figsize=(7.5, 5))
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=frame_grafica)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        self.toolbar = NavigationToolbar2Tk(self.canvas, frame_grafica)
        self.toolbar.update()
        self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)

    def cambiar_color(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona un archivo para cambiar su color.")
            return
        nombre = self.listbox.get(seleccion[0])
        color = colorchooser.askcolor(title=f"Selecciona un color para {nombre}")[1]
        if color:
            self.colores[nombre] = color
            self.graficar()


    def cargar_blanco(self):
        ruta = filedialog.askopenfilename(title="Seleccionar archivo blanco",
                                          filetypes=[("Archivos CV", "*.sp *.txt *.csv *.dat")])
        if not ruta:
            return
        try:
            pot, corr = self.leer_cv_datos(ruta)
            self.datos_blanco = (pot, corr)
            messagebox.showinfo("Blanco cargado", f"Archivo blanco cargado correctamente:\n{os.path.basename(ruta)}")
            if self.archivos:
                self.corregir_con_blanco()
        except Exception as e:
            messagebox.showerror("Error", f"No se pudo cargar el archivo blanco:\n{e}")

    def corregir_con_blanco(self):
        if not self.archivos:
            messagebox.showinfo("Info", "No hay archivos para corregir.")
            return
        if self.datos_blanco is None:
            messagebox.showwarning("Atención", "No ha cargado archivo blanco.")
            return

        pot_blanco, corr_blanco = self.datos_blanco

        self.datos_corregidos.clear()

        for nombre in self.archivos:
            pot, corr = self.datos_originales[nombre]
            if not np.array_equal(pot, pot_blanco):
                corr_blanco_interp = np.interp(pot, pot_blanco, corr_blanco)
            else:
                corr_blanco_interp = corr_blanco
            y_corr = corr - corr_blanco_interp
            self.datos_corregidos[nombre] = (pot, y_corr)

        self.usando_correccion_blanco = True
        messagebox.showinfo("Corrección con blanco", "Se realizó la corrección con el archivo blanco.")
        self.graficar(usando_corregidos=True)

    def regresar_al_menu(self):
        self.master.destroy()
        root_menu = tk.Tk()
        app = AppPrincipal(root_menu)
        root_menu.mainloop()

    def corregir_linea_base(self):
        if not self.archivos:
            messagebox.showinfo("Info", "No hay archivos para corregir.")
            return

        self.datos_corregidos.clear()
        for nombre in self.archivos:
            x, y = self.datos_originales[nombre]
            coef = np.polyfit(x, y, 1)
            linea_base = np.polyval(coef, x)
            y_corr = y - linea_base
            self.datos_corregidos[nombre] = (x, y_corr)

        self.graficar(usando_corregidos=True)

    def restablecer_zoom(self):
        self.xmin.set("")
        self.xmax.set("")
        self.ymin.set("")
        self.ymax.set("")
        self.graficar()

    def leer_cv_datos(self, archivo):
        import re
        potenciales, corrientes = [], []
        patron = re.compile(r'^[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?[\s,]+[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?$')

        with open(archivo, 'r', encoding='utf-8', errors='ignore') as f:
            for linea in f:
                linea = linea.strip().replace('\u2212', '-')
                if not linea:
                    continue
                if not patron.match(linea):
                    continue
                if ',' in linea:
                    partes = linea.split(',')
                else:
                    partes = re.split(r'[ \t]+', linea)
                if len(partes) != 2:
                    continue
                try:
                    x = float(partes[0])
                    y = float(partes[1])
                    potenciales.append(x)
                    corrientes.append(y)
                except ValueError:
                    continue
        if not potenciales:
            raise ValueError("No se encontraron datos numéricos válidos.")
        return np.array(potenciales), np.array(corrientes)

    def cargar_archivos(self):
        rutas = filedialog.askopenfilenames(title="Seleccionar archivos CV",
                                        filetypes=[("Archivos CV", "*.sp *.txt *.csv *.dat")])
        nuevos = False
        for ruta in rutas:
            nombre = os.path.basename(ruta)
            if nombre in self.archivos:
                continue
            try:
                pot, corr = self.leer_cv_datos(ruta)
                self.archivos.append(nombre)
                self.listbox.insert(tk.END, nombre)
                self.datos_originales[nombre] = (pot, corr)
                nuevos = True
            except Exception as e:
                messagebox.showerror("Error", f"Error al leer {nombre}: {e}")

        if nuevos:
            self.graficar()

    def eliminar_archivo(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona uno o más archivos para eliminar.")
            return

        nombres = [self.listbox.get(i) for i in seleccion]
        confirmacion = messagebox.askyesno("Confirmar", f"¿Eliminar {len(nombres)} archivo(s) del programa?\n\n" + "\n".join(nombres))
        if not confirmacion:
            return

        for i in reversed(seleccion):  # Eliminar de la lista en orden inverso
            nombre = self.listbox.get(i)
            self.listbox.delete(i)
            if nombre in self.archivos:
                self.archivos.remove(nombre)
            self.datos_originales.pop(nombre, None)
            self.datos_corregidos.pop(nombre, None)
            self.colores.pop(nombre, None)
            self.colores_archivo.pop(nombre, None)
            if self.datos_blanco == nombre:
                self.datos_blanco = None

        self.graficar()


    def graficar(self, usando_corregidos=False):
        if not self.archivos:
            messagebox.showinfo("Info", "No hay archivos para graficar.")
            return

        self.ax.clear()
        for nombre in self.archivos:
            color = self.colores.get(nombre, None)
            if self.usando_correccion_blanco and nombre in self.datos_corregidos:
                pot, corr = self.datos_corregidos[nombre]
                etiqueta = f"{nombre} (corregido)"
            else:
                pot, corr = self.datos_originales[nombre]
                etiqueta = nombre
            self.ax.plot(pot, corr, label=etiqueta, color=color)

        self.ax.set_xlabel(self.etiqueta_x.get(), fontsize=14)
        self.ax.set_ylabel(self.etiqueta_y.get(), fontsize=14)
        self.ax.spines['top'].set_visible(False)
        self.ax.spines['right'].set_visible(False)
        self.ax.spines['left'].set_position(('outward', 0))
        self.ax.spines['bottom'].set_position(('outward', 0))
        self.ax.tick_params(direction='in', length=6, width=1, which='major', top=False, right=False)
        self.ax.tick_params(direction='in', length=3, width=1, which='minor', top=False, right=False)
        self.ax.minorticks_on()
        self.ax.tick_params(axis='both', which='minor', length=3)

        try:
            if self.xmin.get():
                self.ax.set_xlim(left=float(self.xmin.get()))
            if self.xmax.get():
                self.ax.set_xlim(right=float(self.xmax.get()))
            if self.ymin.get():
                self.ax.set_ylim(bottom=float(self.ymin.get()))
            if self.ymax.get():
                self.ax.set_ylim(top=float(self.ymax.get()))
        except ValueError:
            messagebox.showwarning("Error", "Rangos inválidos, se usará automático.")

        self.ax.grid(False)
        if not self.ocultar_leyenda.get():
            self.ax.legend(fontsize=10)

        self.canvas.draw()

    def alternar_correccion_blanco(self):
        if not self.datos_corregidos:
            messagebox.showinfo("Info", "No hay datos corregidos para mostrar.")
            return
        self.usando_correccion_blanco = not self.usando_correccion_blanco
        estado = "corregidos" if self.usando_correccion_blanco else "originales"
        messagebox.showinfo("Cambio de vista", f"Ahora mostrando datos {estado}.")
        self.graficar()

    def exportar_csv(self):
        if not self.archivos:
            messagebox.showinfo("Info", "No hay archivos cargados.")
            return

        nombre_base = simpledialog.askstring("Nombre base", "Nombre base para exportar") or "cv_export"

        # Exportar datos originales
        with open(f"{nombre_base}_original.csv", 'w', encoding='utf-8') as f:
            f.write("Potencial," + ",".join(self.archivos) + "\n")
            max_len = max(len(v[0]) for v in self.datos_originales.values())
            for i in range(max_len):
                fila = []
                for idx, nombre in enumerate(self.archivos):
                    pot, corr = self.datos_originales[nombre]
                    if i < len(pot):
                        if idx == 0:
                            fila.append(f"{pot[i]}")
                        fila.append(f"{corr[i]}")
                    else:
                        if idx == 0:
                            fila.append("")
                        fila.append("")
                f.write(",".join(fila) + "\n")

        # Exportar datos corregidos si existen
        if self.datos_corregidos:
            with open(f"{nombre_base}_corregidos.csv", 'w', encoding='utf-8') as f:
                f.write("Potencial," + ",".join(self.archivos) + "\n")
                max_len = max(len(v[0]) for v in self.datos_corregidos.values())
                for i in range(max_len):
                    fila = []
                    for idx, nombre in enumerate(self.archivos):
                        pot, corr = self.datos_corregidos.get(nombre, ([], []))
                        if i < len(pot):
                            if idx == 0:
                                fila.append(f"{pot[i]}")
                            fila.append(f"{corr[i]}")
                        else:
                            if idx == 0:
                                fila.append("")
                            fila.append("")
                    f.write(",".join(fila) + "\n")

        messagebox.showinfo("Exportado", "Datos exportados correctamente.")

    def exportar_jpg(self):
        ruta = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPG files", "*.jpg")])
        if ruta:
            self.fig.savefig(ruta, dpi=300, format='jpg')
            messagebox.showinfo("Exportado", f"Gráfica exportada como {ruta}")

# --- DRX ---
class ProcesadorDRX:
    def __init__(self, master):
        self.master = master
        self.master.title("📊 Difracción de Rayos X")
        self.master.geometry("1000x800")
        self.master.configure(bg="#f0e6fa")
        self.master.state('zoomed')

        self.datos_originales = {}
        self.datos_suavizados = {}
        self.mostrar = {}
        self.limites_originales = None
        self.longitud_onda = 1.5406  # Cu Kα (Å)
        self.etiqueta_x = tk.StringVar(value="2θ (°)")
        self.etiqueta_y = tk.StringVar(value="Intensidad (u.a.)")

        self.xmin = tk.StringVar()
        self.xmax = tk.StringVar()
        self.ymin = tk.StringVar()
        self.ymax = tk.StringVar()
        self.var_ocultar_leyenda = tk.BooleanVar(value=False)

        # ----- ESTILOS -----
        color_fondo = "#dccff5"
        color_lista = "#cbb3f0"
        color_grafica = "#ba99eb"
        estilo_boton = {
            "bg": "#8644c5",
            "fg": "white",
            "font": ("Verdana", 10, "bold"),
            "bd": 0,
            "activebackground": "#5e2a9c",
            "activeforeground": "white"
        }
        fuente_label = ("Segoe UI", 9, "bold")

        # ----- FRAMES -----
        frame_controles = tk.Frame(master, bg=color_fondo)
        frame_controles.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        frame_lista = tk.Frame(master, bg=color_lista)
        frame_lista.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=5)

        frame_grafica = tk.Frame(master, bg=color_grafica)
        frame_grafica.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=5)

        # ----- BOTONES -----
        botones = [
            ("📂 Cargar archivos", self.cargar_archivos),
            ("👁️ Mostrar/Ocultar", self.toggle_mostrar_seleccion),
            ("🗑️ Eliminar", self.eliminar_archivos),
            ("📊 Actualizar gráfica", self.actualizar_grafica),
            ("💾 Exportar CSV", self.exportar_csv),
            ("🖼️ Exportar JPG", self.exportar_jpg),
            ("🔄 Restablecer zoom", self.restablecer_zoom),
        ]
        for idx, (texto, comando) in enumerate(botones):
            tk.Button(frame_controles, text=texto, command=comando, **estilo_boton).grid(row=0, column=idx, padx=4)

        # ----- CHECK Y ENTRADAS DE RANGO -----
        tk.Checkbutton(frame_controles, text="Ocultar leyenda", variable=self.var_ocultar_leyenda,
                       command=self.actualizar_grafica, bg=color_fondo).grid(row=1, column=0, columnspan=2, sticky="w", padx=5)
        tk.Button(frame_controles, text="🔙 Regresar al menú", command=self.regresar_al_menu,
        bg="#b21e5a", fg="white", font=fuente_label).grid(row=1, column=7, sticky="e", padx=5)

# --- Etiquetas eje X e Y ---
        tk.Label(frame_controles, text="Etiqueta eje X:", bg=color_fondo, font=fuente_label).grid(row=2, column=0, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.etiqueta_x, width=20).grid(row=2, column=1, sticky='w', padx=5, pady=2)

        tk.Label(frame_controles, text="Etiqueta eje Y:", bg=color_fondo, font=fuente_label).grid(row=2, column=2, sticky='e', padx=5, pady=2)
        tk.Entry(frame_controles, textvariable=self.etiqueta_y, width=20).grid(row=2, column=3, sticky='w', padx=5, pady=2)

# --- Límites de ejes (Xmin/Xmax, Ymin/Ymax) ---
        limites = [
            ("X min:", self.xmin),
            ("X max:", self.xmax),
            ("Y min:", self.ymin),
            ("Y max:", self.ymax)
        ]
        for i, (texto, var) in enumerate(limites):
            col = (i % 2) * 2
            row = 3 + i // 2
            tk.Label(frame_controles, text=texto, bg=color_fondo, font=fuente_label).grid(row=row, column=col, sticky='e', padx=5, pady=2)
            tk.Entry(frame_controles, textvariable=var, width=20).grid(row=row, column=col + 1, sticky='w', padx=5, pady=2)


        # ----- LISTBOX -----
        tk.Label(frame_lista, text="Archivos cargados:", bg="#fff0e1", font=("Verdana", 10, "bold")).pack(anchor='w')
        self.listbox = tk.Listbox(frame_lista, selectmode=tk.EXTENDED, width=35, height=32)
        self.listbox.pack(fill=tk.BOTH, expand=True, pady=5)

        # ----- GRÁFICA -----
        self.fig = Figure(figsize=(8, 6))
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=frame_grafica)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        self.toolbar = NavigationToolbar2Tk(self.canvas, frame_grafica)
        self.toolbar.update()
        self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)


    def leer_datos(self, ruta):
        longitudes = []
        intensidades = []
        with open(ruta, 'r', encoding='utf-8', errors='ignore') as f:
            for linea in f:
                linea = linea.strip()
                if not linea or linea.startswith('#'):
                    continue
                # Intentar separar por tab, espacio o coma
                if ',' in linea:
                    partes = linea.split(',')
                else:
                    partes = linea.split()
                if len(partes) >= 2:
                    try:
                        x = float(partes[0])
                        y = float(partes[1])
                        longitudes.append(x)
                        intensidades.append(y)
                    except:
                        continue
        if len(longitudes) < 5:
            raise ValueError("Datos insuficientes o formato incorrecto")
        return np.array(longitudes), np.array(intensidades)

    def cargar_archivos(self):
        rutas = filedialog.askopenfilenames(title="Selecciona archivos DRX",
                                            filetypes=[("Archivos DRX", "*.txt *.csv *.xy *.dat *.rd *.uxd")])
        if not rutas:
            return
        nuevos = 0
        for ruta in rutas:
            nombre = os.path.splitext(os.path.basename(ruta))[0]
            if nombre in self.datos_originales:
                messagebox.showwarning("Duplicado", f"Archivo '{nombre}' ya cargado.")
                continue
            try:
                x, y = self.leer_datos(ruta)
                if len(y) >= 11:
                    y_suave = savgol_filter(y, 11, 3)
                else:
                    y_suave = y
                self.datos_originales[nombre] = (x, y)
                self.datos_suavizados[nombre] = (x, y_suave)
                self.mostrar[nombre] = True
                self.listbox.insert(tk.END, nombre)
                nuevos += 1
            except Exception as e:
                messagebox.showerror("Error carga", f"No se pudo cargar '{nombre}': {e}")
        if nuevos > 0:
            self.actualizar_grafica()

    def toggle_mostrar_seleccion(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona archivo(s) para mostrar/ocultar.")
            return
        for i in seleccion:
            nombre = self.listbox.get(i)
            self.mostrar[nombre] = not self.mostrar.get(nombre, True)
        self.actualizar_grafica()

    def eliminar_archivos(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            messagebox.showinfo("Info", "Selecciona archivo(s) para eliminar.")
            return
        archivos = [self.listbox.get(i) for i in seleccion]
        if not messagebox.askyesno("Confirmar", f"Eliminar {len(archivos)} archivo(s)?"):
            return
        for n in archivos:
            self.datos_originales.pop(n, None)
            self.datos_suavizados.pop(n, None)
            self.mostrar.pop(n, None)
        for i in reversed(seleccion):
            self.listbox.delete(i)
        self.actualizar_grafica()

    def actualizar_grafica(self):
        self.ax.clear()
        any_data = False

        for nombre, (x, y) in self.datos_suavizados.items():
            if self.mostrar.get(nombre, True):
                self.ax.plot(x, y, label=nombre)
                any_data = True

    # Etiquetas personalizadas
        self.ax.set_xlabel(self.etiqueta_x.get(), fontsize=14)
        self.ax.set_ylabel(self.etiqueta_y.get(), fontsize=14)

    # Estética del gráfico
        self.ax.grid(False)
        self.ax.spines['top'].set_visible(False)
        self.ax.spines['right'].set_visible(False)
        self.ax.spines['left'].set_position(('outward', 0))
        self.ax.spines['bottom'].set_position(('outward', 0))

        self.ax.tick_params(direction='in', length=6, width=1, which='major', top=False, right=False)
        self.ax.tick_params(direction='in', length=3, width=1, which='minor', top=False, right=False)
        self.ax.minorticks_on()

    # Aplicar límites si se proporcionan
        try:
            if self.xmin.get(): self.ax.set_xlim(left=float(self.xmin.get()))
            if self.xmax.get(): self.ax.set_xlim(right=float(self.xmax.get()))
            if self.ymin.get(): self.ax.set_ylim(bottom=float(self.ymin.get()))
            if self.ymax.get(): self.ax.set_ylim(top=float(self.ymax.get()))
        except ValueError:
            messagebox.showwarning("Advertencia", "Verifica que los límites     ingresados sean valores numéricos.")

    # Leyenda
        if any_data and not self.var_ocultar_leyenda.get():
            self.ax.legend()

    # Guardar límites originales para reset
        if any_data:
            self.limites_originales = (self.ax.get_xlim(), self.ax.get_ylim())

        self.canvas.draw()

    def exportar_csv(self):
        if not self.datos_suavizados:
            messagebox.showwarning("Advertencia", "No hay datos para exportar.")
            return

        ruta = filedialog.asksaveasfilename(defaultextension=".csv",
                                           filetypes=[("CSV files", "*.csv")])
        if not ruta:
            return

        with open(ruta, 'w', encoding='utf-8') as f:
            f.write("2theta, " + ", ".join(self.datos_suavizados.keys()) + "\n")

            ref_x = None
            for x, _ in self.datos_suavizados.values():
                ref_x = x
                break

            for i in range(len(ref_x)):
                fila = [f"{ref_x[i]:.4f}"]
                for nombre in self.datos_suavizados:
                    if self.mostrar.get(nombre, True):
                        y = self.datos_suavizados[nombre][1][i]
                        fila.append(f"{y:.6f}")
                f.write(",".join(fila) + "\n")
        messagebox.showinfo("Exportación", f"Datos exportados en:\n{ruta}")

    def exportar_jpg(self):
        ruta = filedialog.asksaveasfilename(defaultextension=".jpg",
                                           filetypes=[("JPG files", "*.jpg"), ("PNG files", "*.png")])
        if not ruta:
            return
        self.fig.savefig(ruta, dpi=300)
        messagebox.showinfo("Exportación", f"Gráfica guardada como:\n{ruta}")

    def restablecer_zoom(self):
        if self.limites_originales:
            self.ax.set_xlim(self.limites_originales[0])
            self.ax.set_ylim(self.limites_originales[1])
            self.canvas.draw()

    def regresar_al_menu(self):
        self.master.destroy()
        root_menu = tk.Tk()
        app = AppPrincipal(root_menu)
        root_menu.mainloop()

#--.Fluorescencia
class FluorescenciaApp:
    def __init__(self, master):
        self.master = master
        self.master.title("🔬 Fluorescencia")
        self.master.geometry("920x780")
        self.master.configure(bg="#e6f0fa")
        self.master.state('zoomed')

        self.datos_originales = {}
        self.datos_suavizados = {}
        self.mostrar = {}
        self.limites_originales = None
        self.ver_suavizados = True
        self.var_ocultar_leyenda = tk.BooleanVar(value=False)
        self.etiqueta_x = tk.StringVar(value="Longitud de onda (nm)")
        self.etiqueta_y = tk.StringVar(value="Intensidad (a.u.)")
        self.xmin = tk.StringVar()
        self.xmax = tk.StringVar()
        self.ymin = tk.StringVar()
        self.ymax = tk.StringVar()

        estilo_boton = {
            "bg": "#f97f51",
            "fg": "white",
            "font": ("Verdana", 10, "bold"),
            "bd": 0,
            "activebackground": "#c44536",
            "activeforeground": "white"
        }

        fuente_label = ("Segoe UI", 9, "bold")
        color_fondo = "#fff0e1"


        frame_controles = tk.Frame(master, bg=color_fondo)
        frame_controles.pack(side=tk.TOP, fill=tk.X, padx=10, pady=5)

        frame_lista = tk.Frame(master, bg="#fff0e1")
        frame_lista.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=5)

        frame_grafica = tk.Frame(master, bg="#b0d4fa")
        frame_grafica.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Controles
        botones = [
            ("📂 Cargar .SP", self.cargar_archivos),
            ("👁️ Mostrar/Ocultar", self.toggle_mostrar_seleccion),
            ("🗑️ Eliminar", self.eliminar_archivos),
            ("📊 Actualizar", self.actualizar_grafica),
            ("💾 Exportar CSV", self.exportar_csv),
            ("🖼️ Guardar JPG", self.exportar_jpg),
            ("🔁 Restablecer Zoom", self.restablecer_zoom),
            ("↔️ Alternar suavizado/original", self.toggle_suavizado)
        ]
        for idx, (txt, cmd) in enumerate(botones):
            tk.Button(frame_controles, text=txt, command=cmd, **estilo_boton).grid(row=0, column=idx, padx=5)

        tk.Checkbutton(frame_controles, text="Ocultar leyenda", variable=self.var_ocultar_leyenda, bg=color_fondo, command=self.actualizar_grafica).grid(row=1, column=0, columnspan=2, sticky="w", padx=5)
        tk.Button(frame_controles, text="🔙 Regresar al menú", command=self.regresar_al_menu, bg="#b21e5a", fg="white", font=fuente_label).grid(row=1, column=7, sticky="e", padx=5)

        labels = [
            ("Etiqueta eje X:", self.etiqueta_x),
            ("Etiqueta eje Y:", self.etiqueta_y),
            ("X min:", self.xmin),
            ("X max:", self.xmax),
            ("Y min:", self.ymin),
            ("Y max:", self.ymax)
        ]
        for i, (texto, var) in enumerate(labels):
            row, col = 2 + i // 2, (i % 2) * 2
            tk.Label(frame_controles, text=texto, bg=color_fondo, font=fuente_label).grid(row=row, column=col, sticky='e', padx=5, pady=2)
            tk.Entry(frame_controles, textvariable=var, width=20).grid(row=row, column=col+1, sticky='w', padx=5, pady=2)

        tk.Label(frame_lista, text="Archivos cargados:", bg="#fff0e1", font=("Segoe UI", 10, "bold")).pack(anchor='w')
        self.listbox = tk.Listbox(frame_lista, selectmode=tk.EXTENDED, width=35, height=32)
        self.listbox.pack(fill=tk.BOTH, expand=True, pady=5)

        self.fig = Figure(figsize=(7.5, 5))
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=frame_grafica)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        self.toolbar = NavigationToolbar2Tk(self.canvas, frame_grafica)
        self.toolbar.update()
        self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)

    def leer_SP(self, ruta):
        with open(ruta, 'r', encoding='utf-8', errors='ignore') as f:
            lineas = f.readlines()

        datos = []
        data_found = False
        for linea in lineas:
            linea = linea.strip()
            if "#DATA" in linea:
                data_found = True
                continue
            if data_found:
                if not linea or not any(c.isdigit() for c in linea):
                    continue
                partes = linea.replace(',', ' ').split()
                if len(partes) >= 2:
                    try:
                        x = float(partes[0])
                        y = float(partes[1])
                        datos.append((x, y))
                    except ValueError:
                        continue
        if len(datos) < 10:
            raise ValueError("Datos insuficientes")
        x, y = zip(*datos)
        return np.array(x), np.array(y)

    def cargar_archivos(self):
        rutas = filedialog.askopenfilenames(title="Selecciona archivos .SP de fluorescencia",
                                            filetypes=[("Archivos SP", "*.sp")])
        if not rutas:
            return
        nuevos = 0
        for ruta in rutas:
            nombre = os.path.splitext(os.path.basename(ruta))[0]
            if nombre in self.datos_originales:
                messagebox.showwarning("Duplicado", f"'{nombre}' ya fue cargado.")
                continue
            try:
                x, y = self.leer_SP(ruta)
                y_suave = savgol_filter(y, 21, 3) if len(y) >= 11 else y
                self.datos_originales[nombre] = (x, y)
                self.datos_suavizados[nombre] = (x, y_suave)
                self.mostrar[nombre] = True
                self.listbox.insert(tk.END, nombre)
                nuevos += 1
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo cargar '{nombre}': {e}")
        if nuevos > 0:
            self.actualizar_grafica()

    def actualizar_grafica(self):
        self.ax.clear()
        any_data = False
        fuente = self.datos_suavizados if self.ver_suavizados else self.datos_originales

        self.ax.set_xlabel(self.etiqueta_x.get(), fontsize=14)
        self.ax.set_ylabel(self.etiqueta_y.get(), fontsize=14)
        self.ax.grid(False)
        self.ax.spines['top'].set_visible(False)
        self.ax.spines['right'].set_visible(False)
        self.ax.spines['left'].set_position(('outward', 0))
        self.ax.spines['bottom'].set_position(('outward', 0))
        self.ax.tick_params(direction='in', length=6, width=1, which='major', top=False, right=False)
        self.ax.tick_params(direction='in', length=3, width=1, which='minor', top=False, right=False)
        self.ax.minorticks_on()
        self.ax.tick_params(axis='both', which='minor', length=3)

        for nombre in fuente:
            if self.mostrar.get(nombre, True):
                x, y = fuente[nombre]
                self.ax.plot(x, y, label=nombre)
                any_data = True

        self.ax.set_title("Datos suavizados" if self.ver_suavizados else "Datos originales", fontsize=14)

        if any_data and not self.var_ocultar_leyenda.get():
            self.ax.legend()

        try:
            xmin = float(self.xmin.get()) if self.xmin.get() else None
            xmax = float(self.xmax.get()) if self.xmax.get() else None
            ymin = float(self.ymin.get()) if self.ymin.get() else None
            ymax = float(self.ymax.get()) if self.ymax.get() else None

            if xmin is not None and xmax is not None:
                self.ax.set_xlim(xmin, xmax)
            if ymin is not None and ymax is not None:
                self.ax.set_ylim(ymin, ymax)
        except ValueError:
            messagebox.showwarning("Límites inválidos", "Los valores de los ejes deben ser numéricos.")

        if any_data:
            self.limites_originales = (self.ax.get_xlim(), self.ax.get_ylim())

        self.canvas.draw()

    def toggle_mostrar_seleccion(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            return
        for i in seleccion:
            nombre = self.listbox.get(i)
            self.mostrar[nombre] = not self.mostrar.get(nombre, True)
        self.actualizar_grafica()

    def eliminar_archivos(self):
        seleccion = self.listbox.curselection()
        if not seleccion:
            return
        if not messagebox.askyesno("Confirmar", "¿Deseas eliminar los archivos seleccionados?"):
            return
        for i in reversed(seleccion):
            nombre = self.listbox.get(i)
            self.datos_originales.pop(nombre, None)
            self.datos_suavizados.pop(nombre, None)
            self.mostrar.pop(nombre, None)
            self.listbox.delete(i)
        self.actualizar_grafica()

    def exportar_csv(self):
        if not self.datos_suavizados:
            messagebox.showwarning("Advertencia", "No hay datos para exportar.")
            return

        base = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV", "*.csv")])
        if not base:
            return

        base_sin_ext = os.path.splitext(base)[0]
        longitudes = list(self.datos_originales.values())[0][0]

        # Exportar datos originales
        with open(base_sin_ext + "_original.csv", 'w', encoding='utf-8') as f:
            encabezado = ["Longitud (nm)"] + [n for n in self.datos_originales if self.mostrar.get(n, True)]
            f.write(",".join(encabezado) + "\n")
            for i in range(len(longitudes)):
                fila = [f"{longitudes[i]:.3f}"]
                for nombre in self.datos_originales:
                    if self.mostrar.get(nombre, True):
                        fila.append(f"{self.datos_originales[nombre][1][i]:.6f}")
                f.write(",".join(fila) + "\n")

        # Exportar datos suavizados
        with open(base_sin_ext + "_suavizado.csv", 'w', encoding='utf-8') as f:
            encabezado = ["Longitud (nm)"] + [n for n in self.datos_suavizados if self.mostrar.get(n, True)]
            f.write(",".join(encabezado) + "\n")
            for i in range(len(longitudes)):
                fila = [f"{longitudes[i]:.3f}"]
                for nombre in self.datos_suavizados:
                    if self.mostrar.get(nombre, True):
                        fila.append(f"{self.datos_suavizados[nombre][1][i]:.6f}")
                f.write(",".join(fila) + "\n")

        messagebox.showinfo("Éxito", f"Archivos exportados:\n{base_sin_ext}_original.csv\n{base_sin_ext}_suavizado.csv")

    def exportar_jpg(self):
        archivo = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPG", "*.jpg"), ("PNG", "*.png")])
        if not archivo:
            return
        self.fig.savefig(archivo, dpi=300)
        messagebox.showinfo("Guardado", f"Gráfica exportada como:\n{archivo}")

    def restablecer_zoom(self):
        if self.limites_originales:
            self.ax.set_xlim(self.limites_originales[0])
            self.ax.set_ylim(self.limites_originales[1])
            self.canvas.draw()

    def toggle_suavizado(self):
        self.ver_suavizados = not self.ver_suavizados
        self.actualizar_grafica()

    def regresar_al_menu(self):
        self.master.destroy()
        root_menu = tk.Tk()
        app = AppPrincipal(root_menu)
        root_menu.mainloop()

# --- Ventana principal con selección de módulo ---
class AppPrincipal:
    def __init__(self, master):
        self.master = master
        self.master.title("🧪 AllSpec")
        self.master.geometry("400x500")
        self.master.configure(bg="#f0f4f8")
        self.master.state('zoomed')

        self.mensajes_dia = {
            0: "🔍 Lunes: Revisa bien tus líneas base.",
            1: "💡 Martes: Guarda tus archivos con fecha clara.",
            2: "🧪 Miércoles: No olvides calibrar el espectrofotómetro.",
            3: "📊 Jueves: Usa referencias internas para mayor precisión.",
            4: "🧼 Viernes: Limpia bien tus celdas de muestra.",
            5: "📁 Sábado: Haz respaldo de tus datos.",
            6: "😌 Domingo: Tómate un descanso, lo mereces."
        }

        self.label_hora = tk.Label(master,
                                   text="",
                                   font=("Times New Roman", 14),
                                   bg="#f0f4f8", fg="#444444")
        self.label_hora.place(relx=0.02, rely=0.055, anchor='nw')
        self.actualizar_hora()

        dia_actual = datetime.datetime.now().weekday()  # 0 = lunes, 6 = domingo
        mensaje_del_dia = self.mensajes_dia.get(dia_actual, "")

        self.label_mensaje_dia = tk.Label(master,
            text=mensaje_del_dia,
            font=("Times New Roman", 11, "italic"),
            bg="#f0f4f8", fg="#333333", wraplength=350,
            justify="left"
        )
        self.label_mensaje_dia.place(relx=0.02, rely=0.10, anchor='nw')

        tk.Label(master,
                 text="Versión 2.1.0",
                 font=("Times New Roman", 12, "bold"),
                 bg="#f0f4f8", fg="#444444").place(relx=0.02, rely=0.015, anchor='nw')

        try:
            image_data = base64.b64decode(logo_base64)
            self.imagen = PhotoImage(data=image_data)
            tk.Label(master, image=self.imagen, bg="#f0f4f8").pack(pady=10)
        except Exception as e:
            print("No se pudo cargar la imagen embebida:", e)
        try:
            depto_img_data = base64.b64decode(logo_depto_base64)
            image = Image.open(io.BytesIO(depto_img_data))
            image = image.resize((250, 151), Image.Resampling.LANCZOS)
            self.logo_depto = ImageTk.PhotoImage(image)
            self.logo_label = tk.Label(master, image=self.logo_depto, bg="#f0f4f8")
            self.logo_label.place(relx=0.0, rely=1.0, anchor='sw', x=10, y=-30)
            self.logo_label.bind("<Button-1>", self.abrir_sitio)

            tk.Label(master,
               text="Para conocer nuestro departamento haga clic sobre el logo.",
               font=("Times New Roman", 11, "bold"),
               bg="#f0f4f8", fg="#444444", justify="left"
            ).place(relx=0.0, rely=1, anchor='sw', x=10, y=-10 )
        except Exception as e:
            print("No se pudo cargar el logo del departamento:", e)

        # Texto de bienvenida
        tk.Label(master,
                 text="Selecciona el tipo de análisis que desea realizar:",
                 font=("Times New Roman", 18),
                 bg="#f0f4f8", fg="#333333").pack(pady=10)

        # Estilo uniforme para los botones
        estilo_boton = {
            "width": 20,           # Número de caracteres aprox.
            "height": 2,           # Número de líneas
            "bg": "#b21e5a",
            "fg": "white",
            "font": ("Times New Roman", 15),
            "bd": 2,
            "relief": tk.RAISED,
            "activebackground": "#000000",
            "activeforeground": "white",
            "highlightbackground": "#b21e5a"
        }

# Frame contenedor centrado
        frame_botones = tk.Frame(master, bg="#f0f4f8")
        frame_botones.pack(pady=30)

# Fila 1
        btn_uvvis = tk.Button(frame_botones, text="🔬 UV-Vis", command=self.abrir_uvvis, **estilo_boton)
        btn_fluor = tk.Button(frame_botones, text="🔧 Fluorescencia", command=self.abrir_fluorescencia, **estilo_boton)
        btn_uvvis.grid(row=0, column=0, padx=15, pady=10)
        btn_fluor.grid(row=0, column=1, padx=15, pady=10)

# Fila 2
        btn_ir = tk.Button(frame_botones, text="🌈 Infrarrojo (IR)", command=self.abrir_ir, **estilo_boton)
        btn_voltam = tk.Button(frame_botones, text="⚡ Voltamperometría", command=self.abrir_voltam, **estilo_boton)
        btn_ir.grid(row=1, column=0, padx=15, pady=10)
        btn_voltam.grid(row=1, column=1, padx=15, pady=10)

# Fila 3 (centrado horizontalmente usando columnspan)
        btn_drx = tk.Button(frame_botones, text="🧱 Difracción RX", command=self.abrir_drx, **estilo_boton)
        btn_drx.grid(row=2, column=0, columnspan=2, pady=10)

# Asegura que ambas columnas se expandan igual
        frame_botones.grid_columnconfigure(0, weight=1)
        frame_botones.grid_columnconfigure(1, weight=1)


        mensaje = ("Este es un programa de acceso libre y gratuito, "
                   "cuya función es ayudar al procesamiento de datos.\nAtt: G.R.")

        departamento = "Departamento de Química\nUniversidad Autónoma Metropolitana\nUnidad Iztapalapa"

        mensaje = ("Este es un programa de acceso libre y gratuito,\n"
                   "cuya función es ayudar al procesamiento de datos.\n"
                   "Att: Guillermo Reyna Rodriguez")

        departamento = ("Departamento de Química\n"
                        "Universidad Autónoma Metropolitana\n"
                        "Unidad Iztapalapa")

        contacto= ("Contacto: lanyrrg@gmail.com")
        mensaje_sugerencia = "Dudas o sugerencias:"

        self.label_mensaje = tk.Label(master,
           text=mensaje,
           font=("Times New Roman", 14),
           bg="#f0f4f8", fg="#555555", justify="right",
           wraplength=400,
        )
        self.label_mensaje.place(relx=1.0, rely=1.0, anchor='se', x=-10, y=-90)

        self.label_departamento = tk.Label(master,
           text=departamento,
           font=("Times New Roman", 12, "bold"),
           bg="#f0f4f8", fg="#555555", justify="right",
           wraplength=400,
        )
        self.label_departamento.place(relx=1.0, rely=1.0, anchor='se', x=-10, y=-10)

        self.label_contacto = tk.Label(master,
           text=contacto,
           font=("Times New Roman", 12, "bold"),
           bg="#f0f4f8", fg="#555555", justify="right",
           wraplength=400,
        )
        self.label_contacto.place(relx=0.5, rely=1.0, anchor='s',y=-10)

        self.label_sugerencia = tk.Label(master,
           text=mensaje_sugerencia,
           font=("Times New Roman", 12),
           bg="#f0f4f8", fg="#555555", justify="right",
           wraplength=400,
        )
        self.label_sugerencia.place(relx=0.5, rely=1.0, anchor='s', y=-35)

    # ---- Botones "Acerca de" y "Salir" ----
        estilo_boton_pequeño = {
            "width": 12,
            "height": 1,
            "bg": "#b21e5a",
            "fg": "white",
            "font": ("Times New Roman", 12, "bold"),
            "bd": 2,
            "relief": tk.RAISED,
            "activebackground": "#000000",
            "activeforeground": "white",
            "highlightbackground": "#b21e5a"
        }

        btn_acerca = tk.Button(master, text="ℹ️ Acerca de", command=self.mostrar_acerca, **estilo_boton_pequeño)
        btn_acerca.place(relx=1.0, rely=0.0, anchor="ne", x=-10, y=10)

        btn_salir = tk.Button(master, text="❌ Salir", command=master.quit, **estilo_boton_pequeño)
        btn_salir.place(relx=1.0, rely=0.0, anchor="ne", x=-10, y=55)


    def abrir_sitio(self, event):
       webbrowser.open("http://quimica.izt.uam.mx/")

    def abrir_uvvis(self):
        self.master.destroy()
        root_uvvis = tk.Tk()
        app_uvvis = ProcesadorEspectros(root_uvvis)
        root_uvvis.mainloop()

    def abrir_ir(self):
        self.master.destroy()
        root_ir = tk.Tk()
        app_ir = ProcesadorIR(root_ir)
        root_ir.mainloop()

    def abrir_voltam(self):
        self.master.destroy()
        root_voltam = tk.Tk()
        app_voltam = CVApp(root_voltam)
        root_voltam.mainloop()

    def abrir_drx(self):
        self.master.destroy()
        root_drx = tk.Tk()
        app_drx = ProcesadorDRX(root_drx)
        root_drx.mainloop()

    def abrir_fluorescencia(self):
        self.master.destroy()
        root_fluorescencia = tk.Tk()
        app_fluorescencia = FluorescenciaApp(root_fluorescencia)
        root_fluorescencia.mainloop()

    def mostrar_acerca(self):
        mensaje = (
            "🧪 AllSpec – Versión 2.0.0\n\n"
            "Desarrollado por Guillermo Reyna Rodríguez\n"
            "Departamento de Química\n"
            "Universidad Autónoma Metropolitana – Iztapalapa\n\n"
            "Este es un programa de acceso libre y gratuito,\n"
            "cuyo propósito es facilitar el procesamiento de datos\n"
            "espectroscópicos y electroquímicos.\n\n"
            "Contacto: lanyrrg@gmail.com"
        )
        messagebox.showinfo("Acerca de AllSpec", mensaje)

    def actualizar_hora(self):
        hora_actual = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        self.label_hora.config(text=f"🕒 {hora_actual}")
        self.master.after(1000, self.actualizar_hora)



if __name__ == '__main__':
    root = tk.Tk()
    app = AppPrincipal(root)
    root.mainloop()